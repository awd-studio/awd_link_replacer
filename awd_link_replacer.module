<?php

/**
 * Implements hook_menu().
 */
function awd_link_replacer_menu() {
  return array(
    'admin/config/search/path/awd_link_replacer' => array(
      'title'            => 'Link replacer',
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('awd_link_replacer_batch_form'),
      'access arguments' => array('administer site configuration'),
    ),
  );
}

/**
 * Form.
 */
function awd_link_replacer_batch_form($form, &$form_state) {
  global $base_url;
  $path = preg_replace('/^http(s)?:\/\//i', '', $base_url);

  $form['settings'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Settings'),
    '#collapsible' => FALSE,
  );

  $form['settings']['global'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Global'),
    '#collapsible' => TRUE,
  );

  $form['settings']['textarea'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Textarea'),
    '#collapsible' => TRUE,
  );

  $form['settings']['textfield'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Textfield'),
    '#collapsible' => TRUE,
  );

  $form['settings']['global']['base_path'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Path'),
    '#required'      => TRUE,
    '#default_value' => $path,
    '#description'   => t('Path for removing (without protocols).<br />e.g. "@path"', array('@path' => $path)),
  );

  $form['settings']['global']['replace_path'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Replace path'),
    '#default_value' => $path,
    '#description'   => t('Path for replace (without protocols). <br />Leave empty for skip.<br />e.g. "@path"', array('@path' => $path)),
  );

  $form['settings']['global']['clean_url'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Clean URL'),
    '#default_value' => TRUE,
    '#description'   => t('Remove "?q=" from links.'),
  );

  if (module_exists('transliteration')) {
    $form['settings']['global']['transliterate'] = array(
      '#type'          => 'checkbox',
      '#title'         => t('Transliterate'),
      '#default_value' => TRUE,
      '#description'   => t('Transliterate links.'),
    );
  }

  $form['settings']['textarea']['textareas'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Textareas'),
    '#default_value' => TRUE,
    '#description'   => t('Check textareas.'),
  );

  $form['settings']['textfield']['textfields'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Textfields'),
    '#default_value' => TRUE,
    '#description'   => t('Check textfields also.'),
  );

  $form['settings']['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Start'),
  );

  return $form;
}

/**
 * Form submit callback.
 */
function awd_link_replacer_batch_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  $settings = array(
    'base_path'     => $values['base_path'],
    'clean_url'     => $values['clean_url'],
    'textfields'    => isset($values['textfields']) ? $values['textfields'] : 0,
    'textareas'     => isset($values['textareas']) ? $values['textareas'] : 0,
    'replace_path'  => !empty($values['replace_path']) ? $values['replace_path'] : 0,
    'transliterate' => isset($values['transliterate']) ? $values['transliterate'] : 0,
  );

  $operations = array();
  $nids = db_query('SELECT nid FROM {node}')->fetchCol();

  foreach ($nids as $nid) {
    $operations[] = array(
      'awd_link_replacer_transliterate',
      array($nid, $settings),
    );
  }

  $batch = array(
    'operations' => $operations,
    'finished'   => 'awd_link_replacer_batch_finished',
  );

  batch_set($batch);
}

/**
 * Batch process callback.
 */
function awd_link_replacer_transliterate($nid, $settings, &$context) {
  $node = node_load($nid);
  $instances = field_info_instances('node', $node->type);
  $textareas = array('text_textarea', 'text_textarea_with_summary');
  $context['results']['titles'] = array();

  if ($settings['textareas']) {
    foreach ($instances as $instance) {
      if (in_array($instance['widget']['type'], $textareas)) {
        $name = $instance['field_name'];
        $raw = $node->{$name}['und'][0]['value'];
        $replace = awd_link_replacer_dom_replace($raw, $settings);
        $node->{$name}['und'][0]['value'] = $replace;

        $context['results']['titles'][] = $node->title;
        $context['message'] = t('Node "%title" updated', array('%title' => check_plain($node->title)));
      }
    }
  }

  if ($settings['textfields']) {
    foreach ($instances as $instance) {
      if ($instance['widget']['type'] == 'text_textfield') {
        $name = $instance['field_name'];
        if (isset($node->{$name}['und']) && count($node->{$name}['und'])) {
          foreach ($node->{$name}['und'] as $i => $item) {
            if (!empty($item['value'])) {
              $raw = $item['value'];
              $replace = awd_link_replacer_textfield_replace($raw, $settings);
              $node->{$name}['und'][$i]['value'] = $replace;

              $context['results']['titles'][] = $node->title;
              $context['message'] = t('Textfield in "%title" is updated', array('%title' => check_plain($node->title)));
            }
          }
        }
      }
    }
  }

  node_save($node);
}

/**
 * Replacing.
 *
 * @param $html
 * @param $settings
 * @return string
 */
function awd_link_replacer_dom_replace($html, $settings) {
  module_load_include('php', 'awd_link_replacer', 'DOM');

  $result = '';

  $html = mb_convert_encoding($html, 'HTML-ENTITIES', 'UTF-8');

  $doc = new DOM();
  $doc->preserveWhiteSpace = FALSE;
  $doc->formatOutput = TRUE;
  @$doc->loadHTML($html);
  $tags = $doc->getElementsByTagName('a');
  foreach ($tags as $lnk) {
    $href = $lnk->getAttribute('href');

    $href = _awd_link_replacer_replace_link($href, $settings);

    $lnk->setAttribute('href', $href);
  }
  $result .= $doc->saveHTML();

  $result = html_entity_decode($result);

  return $result;
}

function awd_link_replacer_textfield_replace($raw, $settings) {
  $pattern = '/http(|s)\:\/\/[^\s]*/ui';

  $result = preg_replace_callback($pattern,
    function ($matches) use ($settings) {
      return _awd_link_replacer_replace_link($matches[0], $settings);
    }, $raw);

  return $result;
}

/**
 * Batch finish callback.
 */
function awd_link_replacer_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(format_plural(count($results['titles']), 'Update complete. Processed @count node', 'Update complete. Processed @count nodes'));
  }
  else {
    drupal_set_message(t('Error'), 'error');
  }
}

function _awd_link_replacer_replace_link($link, $settings) {
  $base_path = $settings['base_path'];
  $replace_path = $settings['replace_path'];
  $clean_url = $settings['clean_url'];
  $transliterate = $settings['transliterate'];

  $base_path_len = strlen($base_path);
  if (substr($link, 0, $base_path_len + 13) == "https://www.$base_path/" ||
    substr($link, 0, $base_path_len + 9) == "https://$base_path/" ||
    substr($link, 0, $base_path_len + 12) == "http://www.$base_path/" ||
    substr($link, 0, $base_path_len + 8) == "http://$base_path/" ||
    substr($link, 0, $base_path_len + 4) == "://$base_path/" ||
    substr($link, 0, $base_path_len) == "$base_path"
  ) {
    $link = urldecode($link);

    if ($replace_path) {
      $link = preg_replace("/$base_path/ui", $replace_path, $link);
    }

    if ($clean_url) {
      $link = preg_replace('/\?q=/i', '', $link);
    }

    if (module_exists('transliteration') && $transliterate) {
      $link = transliteration_get($link);
    }
  }

  return $link;
}
